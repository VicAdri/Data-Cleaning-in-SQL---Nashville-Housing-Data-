/*
Cleaning Nashville Housing Data in SQL Queries
*/



SELECT * FROM [Nashville Housing]


--------------------------------------------------------------------------------------------------------------------------

-- Standardize Date Format

Select saleDate, CONVERT(Date,SaleDate)
From [Nashville Housing]

                 --Alter Table to create SaleDateConverted column

ALTER TABLE [Nashville Housing]
Add SaleDateConverted Date;

                 -- Update SaleDateConverted column
Update [Nashville Housing]
SET SaleDateConverted = CONVERT(Date,SaleDate)


--------------------------------------------------------------------------------------------------------------------------

-- Populate Property Address data


               -- Filter NULL values

Select PropertyAddress
From [Nashville Housing]
Where PropertyAddress is null

               -- Locate where the ParcelID corresponds to PropertyAddress

Select ParcelID,PropertyAddress
From [Nashville Housing]
order by ParcelID

               -- Do a self join to populate NULL

Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
From [Nashville Housing] a
JOIN [Nashville Housing] b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID] <> b.[UniqueID]
Where a.PropertyAddress is null


               -- Update

Update a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
From [Nashville Housing] a
JOIN [Nashville Housing] b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null


--------------------------------------------------------------------------------------------------------------------------

-- Breaking out PropertyAddress into Individual Columns (Address, City)

Select PropertyAddress
From [Nashville Housing]


SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress)) as Address
From [Nashville Housing]

               -- Create and Update PropertySplitAddress column

ALTER TABLE [Nashville Housing]
Add PropertySplitAddress Nvarchar(255);

Update [Nashville Housing]
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )

               -- Create and Update PropertySplitCity column

ALTER TABLE [Nashville Housing]
Add PropertySplitCity Nvarchar(255);

Update [Nashville Housing]
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress))


--------------------------------------------------------------------------------------------------------------------------

-- Breaking out OwnerAddress into Individual Columns (Address, City,State)

Select OwnerAddress
From [Nashville Housing]


Select 
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3) Address 
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2) City
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1) State
From [Nashville Housing]


               -- Create and Update OwnerSplitAddress column

ALTER TABLE [Nashville Housing]
Add OwnerSplitAddress Nvarchar(255);

Update [Nashville Housing]
SET PropertySplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)

               -- Create and Update OwnerSplitCity column

ALTER TABLE [Nashville Housing]
Add OwnerSplitCity Nvarchar(255);

Update [Nashville Housing]
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)

               -- Create and Update OwnerSplitState column

ALTER TABLE [Nashville Housing]
Add OwnerSplitState Nvarchar(255);

Update [Nashville Housing]
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)


--------------------------------------------------------------------------------------------------------------------------


-- Change Y and N to Yes and No in "Sold as Vacant" field

           
		   -- Explore most used respond 
       
Select DISTINCT SoldAsVacant, COUNT(SoldAsVacant)
From [Nashville Housing]
GROUP BY SoldAsVacant
ORDER BY 2

select SoldAsVacant,
  case when SoldAsVacant = 'Y' THEN 'Yes'
   when SoldAsVacant = 'N' THEN 'No'
  else SoldAsVacant end CleanSoldAsVacant
From [Nashville Housing]

             -- Create and Update CleanSoldAsVacant column

ALTER TABLE [Nashville Housing]
Add CleanSoldAsVacant Nvarchar(255);

Update [Nashville Housing]
SET CleanSoldAsVacant = case when SoldAsVacant = 'Y' THEN 'Yes'
   when SoldAsVacant = 'N' THEN 'No'
  else SoldAsVacant end


-----------------------------------------------------------------------------------------------------------------------------------------------------------

-- Remove Duplicates


WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num

From [Nashville Housing]
--order by ParcelID
)
--Select *
Delete 
From RowNumCTE
Where row_num > 1
--Order by PropertyAddress


---------------------------------------------------------------------------------------------------------

-- Delete Unused Columns
      
	     -- NOTE: Only delete after stakeholders approval
Select *
From [Nashville Housing]

ALTER TABLE [Nashville Housing]
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate
